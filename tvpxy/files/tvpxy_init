#!/bin/sh /etc/rc.common
# Copyright (C) 2022 ImmortalWrt.org

START=99
USE_PROCD=1

NAME="msd_lite"
PROG="/usr/bin/$NAME"

CONF="/etc/$NAME/$NAME.conf.sample"
CONFDIR="/var/run/$NAME"

add_interface_tiggers() {
	local enabled interface
	config_get_bool enabled "$1" "enabled" "1"
	config_get interface "$1" interface

	[ "$enabled" -eq "0" -o -z "$interface" ] || procd_add_reload_interface_trigger "$interface"
}

validate_msd_lite_section() {
	uci_load_validate "$NAME" "instance" "$1" "$2" \
		'enabled:bool:0' \
		'address:string' \
		'interface:string' \
		'threads:uinteger:0' \
		'bind_to_cpu:bool:0' \
		'drop_slow_clients:bool:0' \
		'precache_size:uinteger:4096' \
		'ring_buffer_size:uinteger:1024' \
		'multicast_recv_buffer_size:uinteger:512' \
		'multicast_recv_timeout:uinteger:2' \
		'rejoin_time:uinteger:0'
}

start_instance() {
	local section="$1"

	[ "$2" -eq "0" ] || { logger -p daemon.err -t "$NAME" "$section Validation failed."; return 1; }
	[ "$enabled" -eq "1" ] || return 1

	if [ -n "$address" ]; then
		local addr bindlist
		for addr in $address; do
			bindlist="${bindlist:+$bindlist\\n\\t\\t\\t}<bind><address>$addr</address></bind>"
		done
	else
		return 1
	fi

	[ "$bind_to_cpu" = "1" ] && bind_to_cpu="yes" || bind_to_cpu="no"
	[ "$drop_slow_clients" = "1" ] && drop_slow_clients="yes" || drop_slow_clients="no"

	mkdir -p "$CONFDIR"
	sed -e "s,@threadsCountMax@,$threads,g" \
	    -e "s,@fBindToCPU@,$bind_to_cpu,g" \
	    -e "s,@bindList@,$bindlist,g" \
	    -e "s,@ifName@,$interface,g" \
	    -e "s,@fDropSlowClients@,$drop_slow_clients,g" \
	    -e "s,@precache@,$precache_size,g" \
	    -e "s,@ringBufSize@,$ring_buffer_size,g" \
	    -e "s,@rcvBuf@,$multicast_recv_buffer_size,g" \
	    -e "s,@rcvTimeout@,$multicast_recv_timeout,g" \
	    -e "s,@rejoinTime@,$rejoin_time,g" \
		"$CONF" > "$CONFDIR/$section.conf"

	procd_open_instance "$section"
	procd_set_param command "$PROG"
	procd_append_param command -c "$CONFDIR/$section.conf"

	procd_set_param limits core="unlimited"
	procd_set_param limits nofile="1000000 1000000"
	procd_set_param respawn
	procd_set_param stderr 1

	procd_close_instance
}

start_service() {
	config_load "$NAME"

	config_foreach validate_msd_lite_section "instance" start_instance
}

stop_service() {
	rm -rf "$CONFDIR"
}

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "$NAME"

	config_load "$NAME"
	config_foreach add_interface_tiggers "instance"
}


============================================================
#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org
                      
START=50              
USE_PROCD=1      

append_arg() {                      
        local cfg="$1"                                                              
        local var="$2"
        local opt="$3"
        local def="$4"
        local val     
                      
        config_get val "$cfg" "$var"
        [ -n "$val" -o -n "$def" ] && procd_append_param command $opt "${val:-$def}"
}                

append_bool() {                                 
        local cfg="$1"                                     
        local var="$2"
        local opt="$3"
        local def="$4"
        local val     
                 
        config_get_bool val "$cfg" "$var" "$def"
        [ "$val" = 1 ] && procd_append_param command "$opt"
}                                 

start_instance() {         
        local cfg="$1"
        local aux                             
                                       
        config_get_bool aux "$cfg" 'disabled' '0'
        [ "$aux" = 1 ] && return 1     
                                      
        procd_open_instance        
                                   
        procd_set_param command /usr/bin/udpxy
        procd_append_param command "-T"   
		
        append_bool "$cfg" verbose "-v"       
        append_bool "$cfg" status "-S"        
        append_arg "$cfg" bind "-a"           
        append_arg "$cfg" port "-p"           
        append_arg "$cfg" source "-m"         
        append_arg "$cfg" max_clients "-c"
        append_arg "$cfg" log_file "-l"   
        append_arg "$cfg" buffer_size "-B"
        append_arg "$cfg" buffer_messages "-R"
        append_arg "$cfg" buffer_time "-H"    
        append_arg "$cfg" nice_increment "-n" 
        append_arg "$cfg" mcsub_renew "-M"    
                                              
        config_get_bool aux "$cfg" 'respawn' '0'
        [ "$aux" = 1 ] && procd_set_param respawn
                                                 
        procd_close_instance                     
}                                                
                                                 
service_triggers() {                             
        procd_add_reload_trigger "udpxy"         
}                                                
                                        
start_service() {                       
        config_load udpxy               
        config_foreach start_instance udpxy
}